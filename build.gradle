import groovy.json.*

plugins {
    id('fabric-loom').version('1.6-SNAPSHOT')
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

ext.configFile = file "build.properties"

// follow semantic versioning! https://semver.org/
def modSpec = new JsonSlurper().parseText(file(sourceSets.main.resources.srcDirs.first().path + '/fabric.mod.json').text)
archivesBaseName = modSpec.name
version = project.minecraft_version + "-" + modSpec.version
group = project.maven_group + "." + modSpec.id

repositories {
    maven { url 'https://masa.dy.fi/maven' }
    maven { url 'https://api.modrinth.com/maven' }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API is the dependency of modmenu
    modRuntimeOnly "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "maven.modrinth:modmenu:${project.mod_menu_version}"

    // jar-in-jar
    include(modApi(fabricApi.module("fabric-key-binding-api-v1", project.fabric_version)))
}

task tarball(type: Tar) {
    compression = Compression.GZIP
    archiveExtension = 'tar.gz'
    destinationDirectory = layout.buildDirectory.dir('tarball')
    includeEmptyDirs = false
    includes = ["**/*.class", "assets/**", "*.mixins.json", "*-refmap.json"]

    from(zipTree(remapJar.archiveFile)) {
        filesMatching("**/*.class") {
            FileCopyDetails fcd ->
                if (fcd.sourcePath.startsWith("${project.group}.bootstrap".replace('.', '/'))) exclude() else include()
        }
    }

    outputs.file(archiveFile)
}

task repackageJar(type: Zip) {
    entryCompression = ZipEntryCompression.DEFLATED
    archiveExtension = 'jar'
    destinationDirectory = remapJar.destinationDirectory
    archiveAppendix = "darkmagic"
    includeEmptyDirs = false
    excludes = ["assets/**", "*.mixins.json", "*-refmap.json"]

    from(tarball.outputs) {
        rename { _ -> "${modSpec.id}.tar.gz" }
    }
    from(zipTree(remapJar.archiveFile)) {
        filesMatching("fabric.mod.json") {
            filter { String line -> line.replaceAll(/".*\.mixins\.json",?/, "") }
        }
        filesMatching("**/*.class") {
            FileCopyDetails fcd ->
                if (fcd.sourcePath.startsWith("${project.group}.bootstrap".replace('.', '/'))) include() else exclude()
        }
    }
}

remapJar.finalizedBy(tarball)
tarball.finalizedBy(repackageJar)

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"

    // Minecraft 1.18 upwards uses Java 17. 1.20.5 upwards uses Java 21
    it.options.release = 21
}

java {
    withSourcesJar()
}

jar {
    from(fileTree("./").matching { include "LICENSE*" }) {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
    }
}

tasks.register('printToGitHubActions') {
    onlyIf { System.getenv().GITHUB_OUTPUT }
    doLast {
//        same as those in mc-publish
        FileWriter fw = new FileWriter(System.getenv().GITHUB_OUTPUT)
        fw.write("version=${project.version}\n")
        fw.write("game_versions=${project.minecraft_version}\n")
        fw.write("files=${remapJar.archiveFile.get().getAsFile().absolutePath}\n")
        fw.write("release_name=${modSpec.name} v${modSpec.version} for mc ${project.minecraft_version}\n")
        fw.close()
    }
}

tasks.build.finalizedBy(printToGitHubActions)
